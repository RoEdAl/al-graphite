From 0f7f00dcf58d66f4373d8a06a26452dfea2b0d2c Mon Sep 17 00:00:00 2001
From: Edmunt Pienkowsky <roed@onet.eu>
Date: Wed, 3 Apr 2019 09:49:25 +0200
Subject: [PATCH 5/5] Accept IPv6 addresses in CARBONLINK_HOSTS

Using slightly modified functions util.parseDestination(s) from Carbon project.

Signed-off-by: Edmunt Pienkowsky <roed@onet.eu>

diff --git a/webapp/graphite/carbonlink.py b/webapp/graphite/carbonlink.py
index e50d2ec3..378d0402 100644
--- a/webapp/graphite/carbonlink.py
+++ b/webapp/graphite/carbonlink.py
@@ -7,7 +7,7 @@ from django.conf import settings
 
 from graphite.render.hashing import ConsistentHashRing
 from graphite.logger import log
-from graphite.util import load_module, unpickle
+from graphite.util import load_module, unpickle, parseHosts
 from graphite.singleton import ThreadSafeSingleton
 
 
@@ -83,10 +83,8 @@ class CarbonLinkPool(object):
       pass #nothing left in the pool, gotta make a new connection
 
     log.cache("CarbonLink creating a new socket for %s" % str(host))
-    connection = socket.socket()
-    connection.settimeout(self.timeout)
     try:
-      connection.connect((server, port))
+      connection = socket.create_connection((server, port), self.timeout)
     except socket.error:
       self.last_failure[host] = time.time()
       raise
@@ -193,16 +191,7 @@ class CarbonLinkPool(object):
 @ThreadSafeSingleton
 class GlobalCarbonLinkPool(CarbonLinkPool):
   def __init__(self):
-    hosts = []
-    for host in settings.CARBONLINK_HOSTS:
-      parts = host.split(':')
-      server = parts[0]
-      port = int(parts[1])
-      if len(parts) > 2:
-        instance = parts[2]
-      else:
-        instance = None
-      hosts.append((server, int(port), instance))
+    hosts = parseHosts(settings.CARBONLINK_HOSTS)
     timeout = settings.CARBONLINK_TIMEOUT
     CarbonLinkPool.__init__(self, hosts, timeout)
 
diff --git a/webapp/graphite/util.py b/webapp/graphite/util.py
index ec101adb..a5cc5540 100644
--- a/webapp/graphite/util.py
+++ b/webapp/graphite/util.py
@@ -366,3 +366,27 @@ def _jsonResponse(data, queryParams, status=200, encoder=None, default=None):
 def _jsonError(message, queryParams, status=500, encoder=None, default=None):
   return _jsonResponse(
     {'error': message}, queryParams, status=status, encoder=encoder, default=default)
+
+def parseHost(host_string):
+    s = host_string.strip()
+    bidx = s.rfind(']:')    # find closing bracket and following colon.
+    cidx = s.find(':')
+    if s.startswith('[') and bidx is not None:
+        server = s[1:bidx]
+        port = s[bidx + 2:]
+    elif cidx is not None:
+        server = s[:cidx]
+        port = s[cidx + 1:]
+    else:
+        raise ValueError("Invalid host string \"%s\"" % host_string)
+
+    if ':' in port:
+        port, _, instance = port.partition(':')
+    else:
+        instance = None
+
+    return server, int(port), instance
+
+
+def parseHosts(host_strings):
+    return [parseHost(host_string) for host_string in host_strings]
-- 
2.21.0

